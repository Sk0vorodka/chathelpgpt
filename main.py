import asyncio
import httpx
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from collections import defaultdict
import logging
import os

BOT_TOKEN = os.getenv("BOT_TOKEN") or "7971134605:AAEqGrsHwPRdkZ9eUJxFg93W8RD8jcyJaUY"
GPT_API_URL = "https://api.koompi.dev/v1/chat/completions"

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
warnings = defaultdict(int)

@dp.message(Command("start"))
async def start_handler(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å GPT", callback_data="gpt")
        ],
        [
            InlineKeyboardButton(text="üõ† –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã", callback_data="admin")
        ]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@dp.callback_query(F.data == "gpt")
async def gpt_button(callback: types.CallbackQuery):
    await callback.message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /ask")
    await callback.answer()

@dp.callback_query(F.data == "admin")
async def admin_button(callback: types.CallbackQuery):
    text = (
        "üõ† –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:\n"
        "/warn ‚Äî –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
        "/unwarn ‚Äî –°–Ω—è—Ç—å –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n"
        "/kick ‚Äî –ö–∏–∫–Ω—É—Ç—å\n"
        "/ban ‚Äî –ó–∞–±–∞–Ω–∏—Ç—å\n"
        "/mute ‚Äî –ó–∞–º—å—é—Ç–∏—Ç—å\n"
        "/unmute ‚Äî –†–∞–∑–º—å—é—Ç–∏—Ç—å"
    )
    await callback.message.answer(text)
    await callback.answer()

@dp.message(Command("ask"))
async def ask_gpt(message: types.Message):
    query = message.text.removeprefix("/ask").strip()
    if not query:
        await message.answer("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return

    await message.answer("‚úçÔ∏è –î—É–º–∞—é...")

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(GPT_API_URL, json={
                "messages": [{"role": "user", "content": query}],
                "model": "gpt-3.5-turbo"
            })
            data = response.json()
            reply = data["choices"][0]["message"]["content"]
            await message.answer(reply)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(Command("warn"))
async def warn_user(message: Message):
    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.")
        return
    user_id = message.reply_to_message.from_user.id
    warnings[user_id] += 1
    await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –°–µ–π—á–∞—Å —É –Ω–µ–≥–æ {warnings[user_id]} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")

@dp.message(Command("unwarn"))
async def unwarn_user(message: Message):
    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
        return
    user_id = message.reply_to_message.from_user.id
    warnings[user_id] = 0
    await message.answer("‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–Ω—è—Ç—ã.")

@dp.message(Command("kick"))
async def kick_user(message: Message):
    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    user_id = message.reply_to_message.from_user.id
    await bot.ban_chat_member(message.chat.id, user_id)
    await bot.unban_chat_member(message.chat.id, user_id)
    await message.answer("üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç.")

@dp.message(Command("ban"))
async def ban_user(message: Message):
    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    user_id = message.reply_to_message.from_user.id
    await bot.ban_chat_member(message.chat.id, user_id)
    await message.answer("üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.")

@dp.message(Command("mute"))
async def mute_user(message: Message):
    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    user_id = message.reply_to_message.from_user.id
    permissions = types.ChatPermissions()
    await bot.restrict_chat_member(message.chat.id, user_id, permissions=permissions)
    await message.answer("üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—å—é—á–µ–Ω.")

@dp.message(Command("unmute"))
async def unmute_user(message: Message):
    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ä–∞–∑–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    user_id = message.reply_to_message.from_user.id
    allow = types.ChatPermissions(
        can_send_messages=True,
        can_send_media_messages=True,
        can_send_polls=True,
        can_send_other_messages=True,
        can_add_web_page_previews=True,
        can_change_info=True,
        can_invite_users=True,
        can_pin_messages=True
    )
    await bot.restrict_chat_member(message.chat.id, user_id, permissions=allow)
    await message.answer("üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—å—é—á–µ–Ω.")

# –ó–∞–ø—É—Å–∫
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
