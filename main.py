import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message, BotCommand
from aiogram.exceptions import TelegramConflictError
from aiogram.filters import Command, CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
import httpx
import logging

BOT_TOKEN = "7971134605:AAEqGrsHwPRdkZ9eUJxFg93W8RD8jcyJaUY"
GPT_API_URL = "https://api.koompi.dev/v1/chat/completions"
ADMINS = [7822370920]  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
warns = {}
mutes = set()

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()


# ========== /start ==========
@dp.message(CommandStart())
async def start_handler(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å GPT", callback_data="ask")
    kb.button(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="status")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.as_markup())


# ========== /ask ==========
@dp.message(Command("ask"))
async def ask_gpt(message: Message):
    query = message.text.removeprefix("/ask").strip()
    if not query:
        await message.answer("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return

    await message.answer("‚úçÔ∏è –î—É–º–∞—é...")
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(GPT_API_URL, json={
                "messages": [{"role": "user", "content": query}],
                "model": "gpt-3.5-turbo"
            })
            data = response.json()
            reply = data["choices"][0]["message"]["content"]
            await message.answer(reply)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


# ========== –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ==========
@dp.message(Command("ban"))
async def ban_user(message: Message):
    if message.from_user.id not in ADMINS:
        return
    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∑–∞–±–∞–Ω–∏—Ç—å.")
        return
    try:
        await message.chat.ban(message.reply_to_message.from_user.id)
        await message.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


@dp.message(Command("kick"))
async def kick_user(message: Message):
    if message.from_user.id not in ADMINS:
        return
    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∫–∏–∫–Ω—É—Ç—å.")
        return
    try:
        await message.chat.kick(message.reply_to_message.from_user.id)
        await message.chat.unban(message.reply_to_message.from_user.id)
        await message.answer("üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


@dp.message(Command("mute"))
async def mute_user(message: Message):
    if message.from_user.id not in ADMINS:
        return
    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∑–∞–º—É—Ç–∏—Ç—å.")
        return
    user_id = message.reply_to_message.from_user.id
    mutes.add(user_id)
    await message.answer("üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω.")


@dp.message(Command("unmute"))
async def unmute_user(message: Message):
    if message.from_user.id not in ADMINS:
        return
    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —Ä–∞–∑–º—É—Ç–∏—Ç—å.")
        return
    user_id = message.reply_to_message.from_user.id
    mutes.discard(user_id)
    await message.answer("üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω.")


@dp.message(Command("warn"))
async def warn_user(message: Message):
    if message.from_user.id not in ADMINS:
        return
    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω.")
        return
    user_id = message.reply_to_message.from_user.id
    warns[user_id] = warns.get(user_id, 0) + 1
    await message.answer(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ. –í—Å–µ–≥–æ: {warns[user_id]}")


@dp.message(Command("status"))
async def status_cmd(message: Message):
    await message.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")


# ========== –ò–≥–Ω–æ—Ä –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö ==========
@dp.message()
async def block_muted_users(message: Message):
    if message.from_user.id in mutes:
        await message.delete()


# ========== MAIN ==========
async def main():
    try:
        await dp.start_polling(bot)
    except TelegramConflictError:
        print("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≥–¥–µ-—Ç–æ –µ—â—ë. –í—ã—Ö–æ–¥.")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
